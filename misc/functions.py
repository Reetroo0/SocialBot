from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from misc.pgSQL import SaveAns_UpdateQuest
from config import bot
from aiogram.fsm.context import FSMContext

#ans:<–æ—Ç–≤–µ—Ç>:<opinion_id>:<question_id>
#ans:–ü —Ä –æ –≥ —Ä –∞ –º –º –∏ —Ä –æ –≤ –∞ –Ω –∏ –µ :5000:40
#################################################################
#         ^         ^         ^         ^         ^         ^

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–ø—Ä–æ—Å–∞
def ParseQuestion(opinion_id, question_id, question, selected=None):
    try:
        question_type = question["type"]
        text = question["question"]
        row = []

        if question_type == "text":
            return text, None, None, None

        elif question_type == "single_choice":
            options = question.get("options", [])
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            for option in options:
                button = InlineKeyboardButton(text=option, callback_data=f"ans:{option}:{opinion_id}:{question_id}")
                row.append(button)
                if len(row) == 2:
                    keyboard.inline_keyboard.append(row)
                    row = []
            if row:  
                keyboard.inline_keyboard.append(row)
            return text, keyboard, None, None

        elif question_type == "multiple_choice":
            options = question.get("options", [])
            max_choices = question.get("max_choices")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            
            # –ï—Å–ª–∏ selected –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
            if selected is None:
                selected = []
                
            for option in options:
                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ–ø—Ü–∏—è–º
                button_text = f"‚úÖ {option}" if option in selected else option
                button = InlineKeyboardButton(text=button_text, callback_data=f"mans:{option}:{opinion_id}:{question_id}")
                row.append(button)
                if len(row) == 2:
                    keyboard.inline_keyboard.append(row)
                    row = []
            if row:
                keyboard.inline_keyboard.append(row)
            return text, keyboard, max_choices, None

        elif question_type == "scale":
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"‚≠êÔ∏è{i}", callback_data=f"ans:{i}:{opinion_id}:{question_id}"
                    ) for i in range(1, 6)
                ],
                [
                    InlineKeyboardButton(
                        text=f"‚≠êÔ∏è{i}", callback_data=f"ans:{i}:{opinion_id}:{question_id}"
                    ) for i in range(6, 11)
                ]
            ])
            return text, keyboard, None, None

        else:
            return "", None, None, f"Unknown question type: {question_type}"

    except KeyError as e:
        return "", None, None, f"Missing required field: {e}"

    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–ø—Ä–æ—Å–∞–º–∏
def GenerateKeyboard(page, callback_prefix, items):
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–ø–æ 5 –æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    total_pages = (len(items) + 5 - 1) // 5
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    current_items = items[page * 5:(page * 5) + 5]
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ–ø—Ä–æ—Å–∞–º–∏
    for theme, id_opinion in current_items:
        # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        #display_name = theme[:20] + "..." if len(theme) > 12 else theme
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=f"{theme}",callback_data=f"{callback_prefix}:{id_opinion}")])

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{callback_prefix}_page:{page-1}") if page > 0 else None,
        InlineKeyboardButton(text=f"{page+1} / {total_pages}", callback_data="ignore"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{callback_prefix}_page:{page+1}") if page < total_pages - 1 else None
    ]
    # –§–∏–ª—å—Ç—Ä—É–µ–º None –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    nav_buttons = [btn for btn in nav_buttons if btn is not None]

    if nav_buttons:
        keyboard.inline_keyboard.append(nav_buttons)

    return keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def SendNextQuestion(user_id: int, state: FSMContext):
    data = await state.get_data()
    current_question_id = data.get("current_question_id")
    questions = data.get("questions", [])
    opinion_id = data.get("opinion_id", 0)
    prev_message_id = data.get("message_id")  # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    next_question = None
    if not current_question_id:  # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        next_question = questions[0] if questions else None
    else:
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
        for i, q in enumerate(questions):
            if q["id"] == current_question_id:
                if i + 1 < len(questions):
                    next_question = questions[i + 1]
                break
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if not next_question:
        # –û—Ç–º–µ—á–∞–µ–º –æ–ø—Ä–æ—Å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        SaveAns_UpdateQuest(user_id, opinion_id, current_question_id, None, None)
        # –¢–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
        completion_text = "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
        
        try:
            if prev_message_id:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.edit_message_text(
                    text=completion_text,
                    chat_id=user_id,
                    message_id=prev_message_id,
                    reply_markup=None  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç message_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(user_id, completion_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (SendNextQuestion 148): \n{e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(user_id, completion_text)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        return

    question_id = next_question["id"]
    question_text = next_question["question"]

    # –ü–∞—Ä—Å–∏–º –≤–æ–ø—Ä–æ—Å
    text, keyboard, max_choices, err = ParseQuestion(opinion_id, question_id, question_text)
    if err:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–ø—Ä–æ—Å–∞")
        print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–ø—Ä–æ—Å–∞")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await state.update_data(current_question_id=question_id)
        await SendNextQuestion(user_id, state)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ CurrentUserQuestion
    await state.update_data(current_question_id=question_id, max_choices=max_choices)
    SaveAns_UpdateQuest(user_id, opinion_id, question_id, None, question_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
    try:
        if prev_message_id:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await bot.edit_message_text(text=text, chat_id=user_id, message_id=prev_message_id, reply_markup=keyboard)
                return  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await bot.send_message(user_id, text, reply_markup=keyboard)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(message_id=message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ (SendNextQuestion 189): \n{e}")
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.")
        await state.update_data(current_question_id=question_id)
        await SendNextQuestion(user_id, state)

